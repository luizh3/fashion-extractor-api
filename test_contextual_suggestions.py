#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste para sugest√µes contextuais de outfit
"""

import requests
import json
import os

# Configura√ß√£o
API_BASE_URL = "http://localhost:8000"

def test_contextual_suggestions():
    """Testa as sugest√µes contextuais geradas pelo CLIP"""
    print("üß™ TESTE DE SUGEST√ïES CONTEXTUAIS")
    print("=" * 50)
    
    # Verificar se a API est√° rodando
    try:
        health_response = requests.get(f"{API_BASE_URL}/health")
        if health_response.status_code != 200:
            print("‚ùå API n√£o est√° respondendo")
            return False
        print("‚úÖ API est√° funcionando")
    except Exception as e:
        print(f"‚ùå Erro ao conectar com a API: {e}")
        return False
    
    # Cen√°rios de teste com diferentes combina√ß√µes
    test_scenarios = [
        {
            "name": "Outfit Incompleto (2 pe√ßas)",
            "description": "Apenas torso e legs - deve sugerir cal√ßados",
            "expected_suggestions": ["shoes", "boots", "sandals"]
        },
        {
            "name": "Outfit Formal",
            "description": "Terno + Sapatos - deve sugerir acess√≥rios formais",
            "expected_suggestions": ["belt", "hat", "scarf"]
        },
        {
            "name": "Outfit Casual",
            "description": "Camiseta + Cal√ßa + T√™nis - deve sugerir acess√≥rios casuais",
            "expected_suggestions": ["bag", "cap", "backpack"]
        }
    ]
    
    print("\nüé≠ CEN√ÅRIOS DE TESTE:")
    for i, scenario in enumerate(test_scenarios, 1):
        print(f"\n{i}. {scenario['name']}")
        print(f"   Descri√ß√£o: {scenario['description']}")
        print(f"   Sugest√µes esperadas: {', '.join(scenario['expected_suggestions'])}")
    
    print("\nüí° Para testar as sugest√µes contextuais:")
    print("   1. Use o endpoint /api/v1/analysis/complete")
    print("   2. Fa√ßa upload de imagens com diferentes combina√ß√µes de pe√ßas")
    print("   3. Observe as sugest√µes geradas pelo CLIP")
    print("   4. Compare com as sugest√µes fixas anteriores")
    
    return True

def demo_suggestion_logic():
    """Demonstra a l√≥gica das sugest√µes contextuais"""
    print("\nüß† L√ìGICA DAS SUGEST√ïES CONTEXTUAIS")
    print("=" * 50)
    
    print("\n1Ô∏è‚É£ AN√ÅLISE DE CONTEXTO:")
    print("   ‚Ä¢ Identifica as pe√ßas detectadas")
    print("   ‚Ä¢ Determina o estilo (formal/casual)")
    print("   ‚Ä¢ Identifica regi√µes faltantes")
    
    print("\n2Ô∏è‚É£ GERA√á√ÉO DE SUGEST√ïES:")
    print("   ‚Ä¢ Usa embeddings do CLIP para calcular compatibilidade")
    print("   ‚Ä¢ Considera o contexto das pe√ßas existentes")
    print("   ‚Ä¢ Prioriza sugest√µes mais compat√≠veis")
    
    print("\n3Ô∏è‚É£ EXEMPLOS DE SUGEST√ïES INTELIGENTES:")
    
    examples = [
        {
            "context": "Camiseta + Cal√ßa (faltando cal√ßados)",
            "suggestion": "Adicionar um Sapatos pode completar o look",
            "reason": "CLIP detecta que sapatos combinam com camiseta+cal√ßa"
        },
        {
            "context": "Terno + Sapatos (outfit formal)",
            "suggestion": "Um Cinto pode complementar o outfit",
            "reason": "CLIP identifica que cinto √© compat√≠vel com terno"
        },
        {
            "context": "Moletom + Shorts + T√™nis (outfit casual)",
            "suggestion": "Um Bon√© pode complementar o outfit",
            "reason": "CLIP sugere acess√≥rio casual compat√≠vel"
        }
    ]
    
    for i, example in enumerate(examples, 1):
        print(f"\n   {i}. {example['context']}")
        print(f"      Sugest√£o: {example['suggestion']}")
        print(f"      Motivo: {example['reason']}")
    
    print("\n4Ô∏è‚É£ VANTAGENS DAS SUGEST√ïES CONTEXTUAIS:")
    print("   ‚úÖ Baseadas no conhecimento real do CLIP")
    print("   ‚úÖ Consideram o contexto das pe√ßas existentes")
    print("   ‚úÖ Adaptam-se ao estilo detectado")
    print("   ‚úÖ Mais espec√≠ficas e √∫teis")
    print("   ‚úÖ N√£o s√£o sugest√µes gen√©ricas fixas")

def compare_old_vs_new_suggestions():
    """Compara sugest√µes antigas vs novas"""
    print("\nüîÑ COMPARA√á√ÉO: ANTIGAS vs NOVAS SUGEST√ïES")
    print("=" * 50)
    
    print("\nüìã SUGEST√ïES ANTIGAS (FIXAS):")
    print("   ‚Ä¢ 'Adicionar uma terceira pe√ßa pode melhorar o conjunto'")
    print("   ‚Ä¢ 'O outfit est√° completo! Considere acess√≥rios para complementar'")
    print("   ‚ùå Gen√©ricas e n√£o contextuais")
    print("   ‚ùå N√£o consideram as pe√ßas espec√≠ficas")
    print("   ‚ùå N√£o adaptam ao estilo")
    
    print("\nüéØ SUGEST√ïES NOVAS (CONTEXTUAIS):")
    print("   ‚Ä¢ 'Adicionar um Sapatos pode completar o look'")
    print("   ‚Ä¢ 'Um Cinto pode complementar o outfit'")
    print("   ‚Ä¢ 'Um Bon√© pode complementar o outfit'")
    print("   ‚úÖ Espec√≠ficas e contextuais")
    print("   ‚úÖ Baseadas na compatibilidade real")
    print("   ‚úÖ Adaptam-se ao estilo detectado")
    print("   ‚úÖ Usam o conhecimento do CLIP")

if __name__ == "__main__":
    print("üöÄ Iniciando teste de sugest√µes contextuais...")
    
    # Executar testes
    success = test_contextual_suggestions()
    
    if success:
        print("\n‚úÖ Teste conclu√≠do com sucesso!")
        demo_suggestion_logic()
        compare_old_vs_new_suggestions()
    else:
        print("\n‚ùå Teste falhou!")
    
    print("\n" + "=" * 50)
    print("üéØ Para testar as sugest√µes contextuais:")
    print("   1. Use o Swagger UI: http://localhost:8000/docs")
    print("   2. Endpoint: POST /api/v1/analysis/complete")
    print("   3. Fa√ßa upload de imagens com diferentes outfits")
    print("   4. Observe as sugest√µes inteligentes geradas!")
    print("=" * 50) 