import requests
import base64
import json

# Configura√ß√£o
BASE_URL = "http://localhost:8000"
TEST_IMAGE = "shorts.jpg"

def test_health():
    """Testa o endpoint de sa√∫de"""
    print("üîç Testando endpoint de sa√∫de...")
    response = requests.get(f"{BASE_URL}/health")
    print(f"Status: {response.status_code}")
    print(f"Resposta: {response.json()}")
    print()

def test_classify():
    """Testa classifica√ß√£o de roupas"""
    print("üëï Testando classifica√ß√£o de roupas...")
    
    # Upload de arquivo
    with open(TEST_IMAGE, "rb") as f:
        files = {"file": f}
        response = requests.post(f"{BASE_URL}/api/v1/clothing/classify", files=files)
    
    print(f"Status: {response.status_code}")
    result = response.json()
    print(f"Resposta: {result}")
    
    # Mostra as classifica√ß√µes de forma mais leg√≠vel
    if "predictions" in result:
        print(f"üéØ Classifica√ß√µes:")
        for i, pred in enumerate(result["predictions"][:5]):  # Top 5
            print(f"   {i+1}. {pred['category']} ({pred['name']}): {pred['percentage']}")
    
    if "top_prediction" in result:
        top = result["top_prediction"]
        print(f"üèÜ Top predi√ß√£o: {top['category']} ({top['name']}) - {top['percentage']}")
    print()

def test_body_parts_detection():
    """Testa detec√ß√£o de partes do corpo"""
    print("ü¶µ Testando detec√ß√£o de partes do corpo...")
    
    with open(TEST_IMAGE, "rb") as f:
        files = {"file": f}
        response = requests.post(f"{BASE_URL}/api/v1/body-parts/detect", files=files)
    
    print(f"Status: {response.status_code}")
    print(f"Resposta: {response.json()}")
    print()

def test_body_parts_extraction():
    """Testa extra√ß√£o e salvamento de partes do corpo"""
    print("üíæ Testando extra√ß√£o e salvamento de partes do corpo...")
    
    with open(TEST_IMAGE, "rb") as f:
        files = {"file": f}
        response = requests.post(f"{BASE_URL}/api/v1/body-parts/extract", files=files)
    
    print(f"Status: {response.status_code}")
    result = response.json()
    print(f"Resposta: {result}")
    
    # Testa acessar as imagens salvas
    if "body_parts" in result:
        for part_name, url in result["body_parts"].items():
            print(f"Testando acesso a {part_name}: {url}")
            img_response = requests.get(url)
            print(f"Status da imagem: {img_response.status_code}")
    print()

def test_complete_analysis():
    """Testa an√°lise completa"""
    print("üîç Testando an√°lise completa...")
    
    with open(TEST_IMAGE, "rb") as f:
        files = {"file": f}
        response = requests.post(f"{BASE_URL}/api/v1/analysis/complete", files=files)
    
    print(f"Status: {response.status_code}")
    result = response.json()
    print(f"Resposta: {result}")
    
    # Verifica se a an√°lise foi bem-sucedida
    if result.get("success"):
        print(f"‚úÖ An√°lise completa realizada com sucesso!")
        print(f"üìä Resumo:")
        print(f"   - Partes detectadas: {result['summary']['total_parts_detected']}")
        print(f"   - Partes classificadas: {result['summary']['total_parts_classified']}")
        print(f"   - Pessoas detectadas: {result['summary']['people_detected']}")
        
        # Mostra classifica√ß√µes de cada parte
        if "classifications" in result:
            print(f"üéØ Classifica√ß√µes por parte:")
            for part_name, classification in result["classifications"].items():
                top_pred = classification["top_prediction"]
                print(f"   - {part_name}: {top_pred['category']} ({top_pred['name']}) - {top_pred['percentage']}")
        
        # Testa acessar as imagens salvas
        if "body_parts" in result:
            print(f"üñºÔ∏è Testando acesso √†s imagens salvas:")
            for part_name, url in result["body_parts"].items():
                print(f"   - {part_name}: {url}")
                img_response = requests.get(url)
                print(f"     Status: {img_response.status_code}")
    else:
        print(f"‚ùå Erro na an√°lise: {result.get('error', 'Erro desconhecido')}")
    print()

def test_margin_config():
    """Testa configura√ß√£o de margem"""
    print("‚öôÔ∏è Testando configura√ß√£o de margem...")
    
    # Ver configura√ß√£o atual
    response = requests.get(f"{BASE_URL}/api/v1/config/margin")
    print(f"Configura√ß√£o atual - Status: {response.status_code}")
    print(f"Configura√ß√£o atual: {response.json()}")
    
    # Definir nova margem
    new_margin = {"margin_percentage": 0.20}
    response = requests.put(f"{BASE_URL}/api/v1/config/margin", 
                          json=new_margin)
    print(f"Definir margem - Status: {response.status_code}")
    print(f"Resposta: {response.json()}")
    print()

def test_base64_endpoints():
    """Testa endpoints com base64"""
    print("üìÑ Testando endpoints com base64...")
    
    # Converte imagem para base64
    with open(TEST_IMAGE, "rb") as f:
        image_data = f.read()
        base64_string = base64.b64encode(image_data).decode('utf-8')
    
    # Testa classifica√ß√£o com base64
    payload = {"image": base64_string}
    response = requests.post(f"{BASE_URL}/api/v1/clothing/classify/base64", 
                           json=payload)
    print(f"Classifica√ß√£o base64 - Status: {response.status_code}")
    print(f"Resposta: {response.json()}")
    
    # Testa detec√ß√£o de partes com base64
    response = requests.post(f"{BASE_URL}/api/v1/body-parts/detect/base64", 
                           json=payload)
    print(f"Detec√ß√£o base64 - Status: {response.status_code}")
    print(f"Resposta: {response.json()}")
    print()

if __name__ == "__main__":
    print("üöÄ Iniciando testes da API...")
    print("=" * 50)
    
    try:
        test_health()
        test_classify()
        test_body_parts_detection()
        test_body_parts_extraction()
        test_complete_analysis()
        test_margin_config()
        test_base64_endpoints()
        
        print("‚úÖ Todos os testes conclu√≠dos!")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå Erro: N√£o foi poss√≠vel conectar √† API.")
        print("Certifique-se de que a API est√° rodando em http://localhost:8000")
    except FileNotFoundError:
        print(f"‚ùå Erro: Arquivo {TEST_IMAGE} n√£o encontrado.")
        print("Certifique-se de que o arquivo existe no diret√≥rio atual.")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}") 